sb
sapply(split(sb$hp,sb$cyl),mean)
sapply((sb$hp,sb$cyl),mean)
sapply(split(sb$hp,sb$cyl),mean)
sapply(split(sb$hp,sb$cyl==4),mean)
sapply(split(sb$hp,sb$cyl),mean)
sapply(split(sb$hp,sb$cyl),mean)[1]
abs(sapply(split(sb$hp,sb$cyl),mean)[1]-sapply(split(sb$hp,sb$cyl),mean)[2])
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
debug(ls)
ls
ls(9)
f
ls(9)
ls()
formatC
?formatC
pdf()
gzfile()
save()
axis()
jpeg()
windows()
??pcj
??pch
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
install.packages(c("colorspace", "deldir", "evaluate", "HH", "multcomp", "pgirmess"))
View(datos)
View(pi2)
View(Ca)
View(data)
View(dataset)
%in%
?%in%
?in
? in
prueba <- read.delim("C:/Users/Carlos Neftaly/Desktop/prueba.txt")
View(prueba)
attach(prueba)
for(i in levels[tto])
for(i in levels[tto]){
print(i)
}
for(i in levels(tto){
for(i in levels(tto)){
print(i)
}
for(i in levels(tto)){
return(peso[i])
}
for(i in levels(tto)){
return(peso)
}
for(i in levels(tto)){
return(i)
}
for(i in levels(tto)){
print(i)
}
for(i in levels(tto)){
print(i)
prueba(i)
}
for(i in levels(tto)){
print(i)
prueba<-prueba[i]
print(prueba)
}
for(i in levels(tto)){
print(i)
p<-subset(prueba,peso[i])
print(P)
}
for(i in levels(tto)){
print(i)
p<-subset(prueba,peso==i)
print(P)
}
for(i in levels(tto)){
print(i)
p<-subset(prueba,peso==i)
print(p)
}
for(i in levels(tto)){
print(i)
p<-subset(prueba,peso[i])
print(p)
}
for(i in levels(tto)){
print(i)
}
for(i in levels(tto)){
print(i)
p[i]<-subset(prueba)
}
for(i in levels(tto)){
print(i)
p[i]<-subset(prueba)
print(p[i])
}
for(i in levels(tto)){
print(i)
p<-subset(prueba[i])
print(p)
}
for(i in levels(tto)){
print(i)
p<-subset(prueba[i],peso)
print(p)
}
for(i in levels(tto)){
print(i)
p<-subset(prueba,select==i)
print(p)
}
evels(tto)){
print(i)
p<-subset(prueba,select=[i])
print(p)
for(i in levels(tto)){
print(i)
p<-subset(prueba)
print(p)
}
?cut
p
for(i in levels(tto)){
print(i)
}
for(i in levels(tto)){
data<-subset(prueba,Tto %in%c (i,"control"))
print(data)
}
for(i in levels(tto)){
data<-subset(prueba,tto %in%c (i,"control"))
print(data)
}
for(i in levels(tto)){
data<-subset(prueba,tto %in%c (i,"control"))
print(data)
print(data[i])
}
for(i in levels(tto)){
data<-subset(prueba,tto %in%c (i,"control"))
ttest<-t.test(peso~tto,data=data)
print(ttest)
}
?t.test
for(i in levels(tto)){
data<-subset(prueba,tto %in%c (i,"control"))
ttest<-t.test(peso~tto,data=data)
print(list(ttest))
}
for(i in levels(tto)){
data<-subset(prueba,tto %in%c (i,"control"))
ttest<-t.test(peso~tto,data=data)
lista<-list(ttest)
print(do.call(c,lapply(lista,function(x) x$p.value)))
}
?do.call
for(i in levels(tto)){
data<-subset(prueba,tto %in%c (i,"control"))
ttest<-t.test(peso~tto,data=data)
lista<-list(ttest)
print(do.call(c,lapply(lista,function(x) x$p.value)))
}
lista
for(i in levels(tto)){
data<-subset(prueba,tto %in%c (i,"control"))
ttest<-t.test(peso~tto,data=data)
lista<-list(ttest)
print(lista)
print(do.call(c,lapply(lista,function(x) x$p.value)))
}
for(i in levels(tto)){
data<-subset(prueba,tto %in%c (i,"control"))
ttest<-t.test(peso~tto,data=data)$p.value
lista<-list(ttest)
print(lista)
#print(do.call(c,lapply(lista,function(x) x$p.value)))
}
for(i in levels(tto)){
data<-subset(prueba,tto %in%c (i,"control"))
ttest<-t.test(peso~tto,data=data)$group
lista<-list(ttest)
print(lista)
#print(do.call(c,lapply(lista,function(x) x$p.value)))
}
str(result)
for(i in levels(tto)){
data<-subset(prueba,tto %in%c (i,"control"))
ttest<-t.test(peso~tto,data=data)$p.value
lista<-list(ttest)
print(lista)
#print(do.call(c,lapply(lista,function(x) x$p.value)))
}
str(t.test)
install.packages(c("rgdal","raster","R.utils","maptools","spsurvey"),dep=TRUE)
set.seed(1410)
dsmall <- diamonds[sample(nrow(diamonds), 100), ]
data(diamonds)
library(ggplot2)
set.seed(1410)
data(diamonds)
dsmall <- diamonds[sample(nrow(diamonds), 100), ]
qplot(carat, price, data = diamonds)
qplot(log(carat), log(price), data = diamonds)
qplot(carat, price, data = dsmall, colour = color)
qplot(carat, price, data = dsmall, shape = cut)
qplot(carat, price, data = diamonds, alpha = I(1/10))
qplot(carat, price, data = dsmall, geom = c("point", "smooth"))
install.packages(c("caTools", "formatR", "highr", "sp"))
datos
install.packages("knitr")
install.packages(c("Deducer", "igraph", "multcomp"))
install.packages("pander")
library("devtools")
install.packages("devtools")
library("devtools")
install_github(repo="swirl", username="ncarchedi")
library("swirl")
swirl()
install.packages("xtable")
Anotación matemática  y especial en gráficos de __R__
?text
?axis
?label
?labels
library("knitr", lib.loc="C:/Users/Carlos Neftaly/Documents/R/win-library/3.0")
library(devtools)
install_github("knitcitations", "cboettig")
require(knitcitations)
install.packages("bibtex")
write.bib(c('bibtex', 'knitr', 'knitcitations'), file="example.bib")
library("bibtex", lib.loc="C:/Users/Carlos Neftaly/Documents/R/win-library/3.0")
write.bib(c('bibtex', 'knitr', 'knitcitations'), file="example.bib")
biblio <- read.bib("example.bib")
biblio
r <- ref("10.1111/j.1461-0248.2005.00827.x")
print(r, "html")
library("knitcitations", lib.loc="C:/Users/Carlos Neftaly/Documents/R/win-library/3.0")
r <- ref("10.1111/j.1461-0248.2005.00827.x")
print(r, "html")
r <- ref("10.1094/PHI-A-2008-0129-02")
print(r, "html")
refs <- lapply("10.1094/PHI-A-2008-0129-02"),
ref)
refs <- lapply("10.1094/PHI-A-2008-0129-02"),ref)
write.bibtex(refs, file = "refs.bib")
refs <- lapply(c("10.1094/PHI-A-2008-0129-02", "10.1094/PHI-A-2007-1226-02"),
ref)
write.bibtex(refs, file = "refs.bib")
bib <- read.bibtex("example.bib")
bib[["knitr"]]
bibliography("html")
#Set up disease severity percent measurements;
#change these in subsequent analyses to see how it affects
#the AUDPC
ds0<-1
ds1<-2
ds2<-7
ds3<-7.5
#Put these values into a vector without making any changes
disease.severity<-c(ds0,ds1,ds2,ds3)
#Time points at which disease severity
#   measurements are made,
#change these in subsequent analyses to
#see how it affects the AUDPC Value
t0<-0
t1<-2
t2<-5
t3<-6
#Put time period into a vector
## Do not change these values
time.period<-c(t0,t1,t2,t3)
#Refresh your memory about how the plot function works
help(plot)
#Create the plot of disease severity over time
plot(time.period,
disease.severity,
ylim=c(0,(ds3+1)),
xlim=c(0,(t3+0.5)),
xlab="Time",
ylab="Disease Severity (%)",
type="o",
pch=19,
col="mediumblue")
#Add a title and subtitle to our plot
title(main="Illustration of AUDPC Calculation",
sub="Figure 1")
#Add text to x labels defining time periods
#   defined in text
mtext("=t0",1,at=0.3,1)
mtext("=t1",1,at=2.3,1)
mtext("=t2",1,at=5.3,1)
mtext("=t3",1,at=6.3,1)
#Illustrate the area under disease progress
#   curve with rectangles.
## Do not change these values
rect(t0,0,t1,((ds0+ds1)/2),border="orange")
# Add text to rectangle to describe rectangle
text(1,1,"A1")
#Add segment to Y axis
#And so-on
rect(t1,0,t2,((ds1+ds2)/2),border="orange")
text(((t1+t2)/2),(((ds1+ds2)/2)/2),"S2")
#Draw line to axis and label with value
segments(.4,((ds1+ds2)/2),t2,((ds1+ds2)/2),
col="black",lty="18")
text(0,((ds1+ds2)/2),((ds1+ds2)/2))
rect(t2,0,t3,((ds2+ds3)/2),border="orange")
text(((t2+t3)/2),(((ds2+ds3)/2)/2),"S3")
segments(0.4,((ds2+ds3)/2),t2,((ds2+ds3)/2),
col="black",lty="18")
text(0,((ds2+ds3)/2),((ds2+ds3)/2))
#Build a function for AUDPC calculation
#the left curly bracket indicates the beginning
#   of the function
audpc <- function(disease.severity,time.period){
#n is the length of time.period, or
#  the total number of sample dates
n <- length(time.period)
#meanvec is the vector (matrix with one dimension)
#that will contain the mean percent infection
#it is initialized containing -1 for all entries
#this sort of initialization is sometimes useful
#  for debugging
meanvec <- matrix(-1,(n-1))
#intvec is the vector that will contain the length of
#   time between sampling dates
intvec <- matrix(-1,(n-1))
#the loop goes from the first to the penultimate entry
#the left curly bracket indicates the beginning of
#   commands in the loop
for(i in 1:(n-1)){
#the ith entry in meanvec is replaced with the
#   mean percent infection
#between sample time i and sample time i+1
meanvec[i] <- mean(c(disease.severity[i],
disease.severity[i+1]))
#the ith entry in intvec is replaced with the length
# of the time interval between time i and time i+1
intvec[i] <- time.period[i+1] - time.period[i]
#the right curly bracket ends the loop
}
#the two vectors are multiplied together
#  one entry at a time
infprod <- meanvec * intvec
#the sum of the entries in the resulting vector
#   gives the AUDPC
sum(infprod)
#the right curly bracket ends the function
}
#Now apply the function to the example data and put
# the result in a new object called 'AUDPCexample'
audpc(disease.severity,time.period) -> AUDPCexample
#Display AUDPC Value
#Draw rectangle around value
rect(0.1,(ds3+.3),2,(ds3+1),border="black")
#AUDPC Text
text(1.05,(ds3+0.8),"AUDPC")
text(1.05,(ds3+0.5),AUDPCexample)
library(animation)
n <- length(speed <- runif(angle <- runif(x <- strsplit(
"FELIZ NAVIDAD R","")[[1]], 0, 360), 0, 20))
x11(width = 10, height = 3)
par(mar = rep(0, 4), bg = "darkred")
colores <- colors()[c(47:51,81, 139, 254:259, 448, 493:497, 614)]
for (j in 1:100) {
angle = angle + speed
dev.hold()
plot.new()
plot.window(c(1, n), c(0, 1))
for (i in 1:n) text(i, 0.5, x[i], srt = angle[i], cex = runif(1,
1, 4), col = sample(colores, 1))
ani.pause(0.05)
}
install.packages("animation")
library("animation", lib.loc="C:/Users/Carlos Neftaly/Documents/R/win-library/3.0")
library(animation)
n <- length(speed <- runif(angle <- runif(x <- strsplit(
"FELIZ NAVIDAD R","")[[1]], 0, 360), 0, 20))
x11(width = 10, height = 3)
par(mar = rep(0, 4), bg = "darkred")
colores <- colors()[c(47:51,81, 139, 254:259, 448, 493:497, 614)]
for (j in 1:100) {
angle = angle + speed
dev.hold()
plot.new()
plot.window(c(1, n), c(0, 1))
for (i in 1:n) text(i, 0.5, x[i], srt = angle[i], cex = runif(1,
1, 4), col = sample(colores, 1))
ani.pause(0.05)
}
install.packages(c("agricolae", "digest", "e1071", "hexbin", "iplots", "lawstat", "permute", "png", "R.methodsS3", "R.oo", "raster", "rgdal", "rJava", "vegan"))
packages(MASS)
install.packages('MASS')
library(MASS)
2000/14
y<-c(1:20)
y2<-y^0.4
y2
2222^0
install.packages(c("gtools", "Hmisc", "mvtnorm", "R.oo", "raster", "rgdal", "rJava", "swirl", "TH.data", "vegan"))
install.packages("bioconductor")
source("http://bioconductor.org/biocLite.R")
biocLite()
gee
remove.packages("MASS", lib="C:/Program Files/R/R-3.0.1/library")
516*12*5
30960*3000000
library("devtools", lib.loc="C:/Users/Carlos Neftaly/Documents/R/win-library/3.0")
library("devtools")
devtools::install_github("plotly/R-api")
library(plotly)
username='NeftalyL'
email='elchocoanito@gmail.com'
response = signup(username, email)
tmp_pw = response$tmp_pw
api_key = response$api_key
library(plotly)
p <- plotly(username="NeftalyL", key="44txrtd87r")
p$plotly
p$plotly, p$style, p$layout
p$style
1.3*300
3/3.5
install.packages("permute")
source('http://www.openintro.org/stat/data/present.R')
View(present)
View(present)
dim(present)
sum(girls)
attach(present)
sum(girls)
present$girls
plot(girls,year)
plot(year,girls)
plot(year,girls+boys)
by(girls+boys,year,max)
max(girls+boys)
by(girls+boys,year,max)
max(girls+boys)
by(girls+boys,year,max)
plot(year,boys)
plot(year,boys-girls)
plot(year,girls-boys)
boys>girls
plot(year,boys/girls)
by(year,(boys-girls),abs)
max(girls+boys)
by(year,girl+boys,max)
by(year,girls+boys,max)
by(year,(boys-girls),abs)
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library("slidify", lib.loc="C:/Users/Carlos Neftaly/Documents/R/win-library/3.0")
library("slidifyLibraries", lib.loc="C:/Users/Carlos Neftaly/Documents/R/win-library/3.0")
library(slidify)
author("mydeck")
publish(user = "neftalyl", repo = "REPO", host = 'github')
publish(user = "neftalyl", repo = "git@github.com:neftalyl/Rslides.git")
title       : Introducción a R
library('slidify')
author('IntroR')
author('IntroR')
slidify("index.Rmd")
publish(user = "neftalyl", repo = "Rslides", host = 'github')
publish(user = "neftalyl", repo = "Rslides", host = 'github')
publish('IntroR', host = 'dropbox')
dl.dropbox.com/u/{{elchocoanito@gmail.com}}/{{Rslides}}/
publish('IntroR', host = 'dropbox')
library('slidify')
author('IntroR')
publish('IntroR', host = 'dropbox')
publish(user = "neftalyl", repo = "Rslides", host = 'github')
author('IntroR')
slidify("index.Rmd")
publish(user = "neftalyl", repo = "Rslides", host = 'github')
author('R - Seminario')
slidify("index.Rmd")
publish(user = "neftalyl", repo = "Rslides", host = 'github')
publish(user = "neftalyl", repo = "Rslides", host = 'github')
browseURL("index.html")
browseURL("index.html")
library('slidify')
author('R - Seminario')
slidify("index.Rmd")
browseURL("index.html")
author('R - Seminario')
slidify("index.Rmd")
browseURL("index.html")
library('slidify')
author('R - Seminario')
plot(1:20)
setwd("~/")
author('')
library('slidify')
setwd("C:/Users/Carlos Neftaly/Desktop/Slidify")
author('IntroR')
library("knitr", lib.loc="C:/Users/Carlos Neftaly/Documents/R/win-library/3.0")
